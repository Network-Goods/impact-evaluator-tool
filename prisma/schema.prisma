generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Evaluation {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String?
  status           String            @default("draft")
  description      String            @default("")
  start_time       DateTime?         @db.Timestamptz(6)
  end_time         DateTime?         @db.Timestamptz(6)
  form_description String?
  is_upload        Boolean?
  evaluation_field EvaluationField[]
  evaluator        Evaluator[]
  invitation       Invitation[]
  submission       Submission[]

  @@map("evaluation")
}

model EvaluationField {
  id               String            @id @db.Uuid
  evaluation_id    String?           @db.Uuid
  heading          String?
  subheading       String?
  char_count       Int?
  placeholder      String?
  field_order      Int?
  evaluation       Evaluation?       @relation(fields: [evaluation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  submission_field SubmissionField[]

  @@map("evaluation_field")
}

model Evaluator {
  id            String     @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  evaluation_id String     @db.Uuid
  user_id       String     @db.Uuid
  voice_credits Int?
  is_submitted  Boolean    @default(false)
  is_sme        Boolean?
  code          String?
  evaluation    Evaluation @relation(fields: [evaluation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  votes         Votes[]

  @@map("evaluator")
}

model Invitation {
  id             String     @id @db.Uuid
  evaluation_id  String     @db.Uuid
  code           String?
  voice_credits  Int?
  remaining_uses Int        @default(100)
  is_sme         Boolean    @default(false)
  evaluation     Evaluation @relation(fields: [evaluation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("invitation")
}

model Submission {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  github_link      String?
  evaluation_id    String            @db.Uuid
  description      Json              @db.Json
  links            Json?
  github_handle    String?
  user_id          String?           @db.Uuid
  is_submitted     Boolean           @default(false)
  contract_id      String?
  evaluation       Evaluation        @relation(fields: [evaluation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  submission_field SubmissionField[]
  votes            Votes[]

  @@map("submission")
}

model SubmissionField {
  id               String           @id @db.Uuid
  fields_id        String?          @db.Uuid
  field_body       String?
  submission_id    String?          @db.Uuid
  evaluation_field EvaluationField? @relation(fields: [fields_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  submission       Submission?      @relation(fields: [submission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("submission_field")
}

model User {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String?
  email           String?
  github_handle   String?
  invite_status   String?
  preferred_email String?
  github_user_id  String?     @db.Uuid
  role            String      @default("user")
  evaluator       Evaluator[]
  test            String?

  @@map("user")
}

model Votes {
  evaluator_id  String     @db.Uuid
  submission_id String     @db.Uuid
  votes         Int
  evaluator     Evaluator  @relation(fields: [evaluator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  submission    Submission @relation(fields: [submission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([evaluator_id, submission_id])
  @@map("votes")
}
