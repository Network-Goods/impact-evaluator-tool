generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model evaluation {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String?
  status           String             @default("draft")
  description      String             @default("")
  start_time       DateTime?          @db.Timestamptz(6)
  end_time         DateTime?          @db.Timestamptz(6)
  form_description String?
  evaluation_field evaluation_field[]
  evaluator        evaluator[]
  invitation       invitation[]
  submission       submission[]
}

model evaluation_field {
  id               String             @id @db.Uuid
  evaluation_id    String?            @db.Uuid
  heading          String?
  subheading       String?
  char_count       Int?
  placeholder      String?
  evaluation       evaluation?        @relation(fields: [evaluation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  submission_field submission_field[]
}

model evaluator {
  id            String     @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  evaluation_id String     @db.Uuid
  user_id       String     @db.Uuid
  voice_credits BigInt?
  is_submitted  Boolean    @default(false)
  is_sme        Boolean?
  code          String?
  evaluation    evaluation @relation(fields: [evaluation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  votes         votes[]
}

model invitation {
  id             String     @id @db.Uuid
  evaluation_id  String     @db.Uuid
  code           String?
  voice_credits  BigInt?
  remaining_uses BigInt     @default(100)
  is_sme         Boolean    @default(false)
  evaluation     evaluation @relation(fields: [evaluation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model submission {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String
  github_link      String?
  evaluation_id    String             @db.Uuid
  description      Json               @db.Json
  links            Json?
  github_handle    String?
  user_id          String?            @db.Uuid
  is_submitted     Boolean            @default(false)
  contract_id      String?
  evaluation       evaluation         @relation(fields: [evaluation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  submission_field submission_field[]
  votes            votes[]
}

model submission_field {
  id               String            @id @db.Uuid
  fields_id        String?           @db.Uuid
  field_body       String?
  submission_id    String?           @db.Uuid
  evaluation_field evaluation_field? @relation(fields: [fields_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  submission       submission?       @relation(fields: [submission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id              String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String?
  email           String?
  github_handle   String?
  invite_status   String?
  preferred_email String?
  github_user_id  String?     @db.Uuid
  role            String      @default("user")
  evaluator       evaluator[]
}

model votes {
  evaluator_id  String     @db.Uuid
  submission_id String     @db.Uuid
  votes         BigInt
  evaluator     evaluator  @relation(fields: [evaluator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  submission    submission @relation(fields: [submission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([evaluator_id, submission_id])
}
