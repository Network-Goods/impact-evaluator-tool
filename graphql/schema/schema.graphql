scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  lt: BigInt
  lte: BigInt
  neq: BigInt
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean!]
  lt: Boolean
  lte: Boolean
  neq: Boolean
}

scalar Cursor

scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date
  gt: Date
  gte: Date
  in: [Date!]
  lt: Date
  lte: Date
  neq: Date
}

scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime
  gt: Datetime
  gte: Datetime
  in: [Datetime!]
  lt: Datetime
  lte: Datetime
  neq: Datetime
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  neq: Float
}

"""
Boolean expression comparing fields on type "ID"
"""
input IDFilter {
  eq: ID
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  neq: Int
}

scalar JSON

"""The root type for creating and mutating data"""
type Mutation {
  """Deletes zero or more records from the `evaluation` collection"""
  deleteFromevaluationCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: evaluationFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): evaluationDeleteResponse!

  """Deletes zero or more records from the `evaluator` collection"""
  deleteFromevaluatorCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: evaluatorFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): evaluatorDeleteResponse!

  """Deletes zero or more records from the `submission` collection"""
  deleteFromsubmissionCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: submissionFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): submissionDeleteResponse!

  """Deletes zero or more records from the `user` collection"""
  deleteFromuserCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: userFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): userDeleteResponse!

  """Adds one or more `evaluation` records to the collection"""
  insertIntoevaluationCollection(objects: [evaluationInsertInput!]!): evaluationInsertResponse

  """Adds one or more `evaluator` records to the collection"""
  insertIntoevaluatorCollection(objects: [evaluatorInsertInput!]!): evaluatorInsertResponse

  """Adds one or more `submission` records to the collection"""
  insertIntosubmissionCollection(objects: [submissionInsertInput!]!): submissionInsertResponse

  """Adds one or more `user` records to the collection"""
  insertIntouserCollection(objects: [userInsertInput!]!): userInsertResponse

  """Updates zero or more records in the `evaluation` collection"""
  updateevaluationCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: evaluationUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: evaluationFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): evaluationUpdateResponse!

  """Updates zero or more records in the `evaluator` collection"""
  updateevaluatorCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: evaluatorUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: evaluatorFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): evaluatorUpdateResponse!

  """Updates zero or more records in the `submission` collection"""
  updatesubmissionCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: submissionUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: submissionFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): submissionUpdateResponse!

  """Updates zero or more records in the `user` collection"""
  updateuserCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: userUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: userFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): userUpdateResponse!
}

interface Node {
  """Retrieves a record by `ID`"""
  nodeId: ID!
}

"""Defines a per-field sorting order"""
enum OrderByDirection {
  """Ascending order, nulls first"""
  AscNullsFirst

  """Ascending order, nulls last"""
  AscNullsLast

  """Descending order, nulls first"""
  DescNullsFirst

  """Descending order, nulls last"""
  DescNullsLast
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""The root type for querying data"""
type Query {
  """A pagable collection of type `evaluation`"""
  evaluationCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: evaluationFilter

    """Sort order to apply to the collection"""
    orderBy: [evaluationOrderBy!]
  ): evaluationConnection

  """A pagable collection of type `evaluator`"""
  evaluatorCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: evaluatorFilter

    """Sort order to apply to the collection"""
    orderBy: [evaluatorOrderBy!]
  ): evaluatorConnection

  """Retrieve a record by its `ID`"""
  node(
    """The record's `ID`"""
    nodeId: ID!
  ): Node

  """A pagable collection of type `submission`"""
  submissionCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: submissionFilter

    """Sort order to apply to the collection"""
    orderBy: [submissionOrderBy!]
  ): submissionConnection

  """A pagable collection of type `user`"""
  userCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: userFilter

    """Sort order to apply to the collection"""
    orderBy: [userOrderBy!]
  ): userConnection
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  neq: String
}

scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time
  gt: Time
  gte: Time
  in: [Time!]
  lt: Time
  lte: Time
  neq: Time
}

scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
  in: [UUID!]
  neq: UUID
}

type evaluation implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: UUID!
  name: String!
  status: String!
  description: String
  submissionCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: submissionFilter

    """Sort order to apply to the collection"""
    orderBy: [submissionOrderBy!]
  ): submissionConnection
  evaluatorCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: evaluatorFilter

    """Sort order to apply to the collection"""
    orderBy: [evaluatorOrderBy!]
  ): evaluatorConnection
}

type evaluationConnection {
  edges: [evaluationEdge!]!
  pageInfo: PageInfo!
}

type evaluationDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [evaluation!]!
}

type evaluationEdge {
  cursor: String!
  node: evaluation!
}

input evaluationFilter {
  id: UUIDFilter
  name: StringFilter
  status: StringFilter
  description: StringFilter
  nodeId: IDFilter
}

input evaluationInsertInput {
  id: UUID
  name: String
  status: String
  description: String
}

type evaluationInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [evaluation!]!
}

input evaluationOrderBy {
  id: OrderByDirection
  name: OrderByDirection
  status: OrderByDirection
  description: OrderByDirection
}

input evaluationUpdateInput {
  id: UUID
  name: String
  status: String
  description: String
}

type evaluationUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [evaluation!]!
}

type evaluator implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  evaluation_id: UUID!
  user_id: UUID!
  voice_credits: Int
  id: UUID!
  evaluation: evaluation
  user: user
}

type evaluatorConnection {
  edges: [evaluatorEdge!]!
  pageInfo: PageInfo!
}

type evaluatorDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [evaluator!]!
}

type evaluatorEdge {
  cursor: String!
  node: evaluator!
}

input evaluatorFilter {
  evaluation_id: UUIDFilter
  user_id: UUIDFilter
  voice_credits: IntFilter
  id: UUIDFilter
  nodeId: IDFilter
}

input evaluatorInsertInput {
  evaluation_id: UUID
  user_id: UUID
  voice_credits: Int
  id: UUID
}

type evaluatorInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [evaluator!]!
}

input evaluatorOrderBy {
  evaluation_id: OrderByDirection
  user_id: OrderByDirection
  voice_credits: OrderByDirection
  id: OrderByDirection
}

input evaluatorUpdateInput {
  evaluation_id: UUID
  user_id: UUID
  voice_credits: Int
  id: UUID
}

type evaluatorUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [evaluator!]!
}

type submission implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: UUID!
  user_id: UUID!
  name: String!
  github_link: String
  website_link: String!
  description: String!
  evaluation_id: UUID!
  evaluation: evaluation
  user: user
}

type submissionConnection {
  edges: [submissionEdge!]!
  pageInfo: PageInfo!
}

type submissionDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [submission!]!
}

type submissionEdge {
  cursor: String!
  node: submission!
}

input submissionFilter {
  id: UUIDFilter
  user_id: UUIDFilter
  name: StringFilter
  github_link: StringFilter
  website_link: StringFilter
  description: StringFilter
  evaluation_id: UUIDFilter
  nodeId: IDFilter
}

input submissionInsertInput {
  id: UUID
  user_id: UUID
  name: String
  github_link: String
  website_link: String
  description: String
  evaluation_id: UUID
}

type submissionInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [submission!]!
}

input submissionOrderBy {
  id: OrderByDirection
  user_id: OrderByDirection
  name: OrderByDirection
  github_link: OrderByDirection
  website_link: OrderByDirection
  description: OrderByDirection
  evaluation_id: OrderByDirection
}

input submissionUpdateInput {
  id: UUID
  user_id: UUID
  name: String
  github_link: String
  website_link: String
  description: String
  evaluation_id: UUID
}

type submissionUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [submission!]!
}

type user implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: UUID!
  name: String!
  email: String
  github_handle: String
  invite_status: String
  preferred_email: UUID
  github_user_id: UUID
  role: String!
  submissionCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: submissionFilter

    """Sort order to apply to the collection"""
    orderBy: [submissionOrderBy!]
  ): submissionConnection
  evaluatorCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: evaluatorFilter

    """Sort order to apply to the collection"""
    orderBy: [evaluatorOrderBy!]
  ): evaluatorConnection
}

type userConnection {
  edges: [userEdge!]!
  pageInfo: PageInfo!
}

type userDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [user!]!
}

type userEdge {
  cursor: String!
  node: user!
}

input userFilter {
  id: UUIDFilter
  name: StringFilter
  email: StringFilter
  github_handle: StringFilter
  invite_status: StringFilter
  preferred_email: UUIDFilter
  github_user_id: UUIDFilter
  role: StringFilter
  nodeId: IDFilter
}

input userInsertInput {
  id: UUID
  name: String
  email: String
  github_handle: String
  invite_status: String
  preferred_email: UUID
  github_user_id: UUID
  role: String
}

type userInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [user!]!
}

input userOrderBy {
  id: OrderByDirection
  name: OrderByDirection
  email: OrderByDirection
  github_handle: OrderByDirection
  invite_status: OrderByDirection
  preferred_email: OrderByDirection
  github_user_id: OrderByDirection
  role: OrderByDirection
}

input userUpdateInput {
  id: UUID
  name: String
  email: String
  github_handle: String
  invite_status: String
  preferred_email: UUID
  github_user_id: UUID
  role: String
}

type userUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [user!]!
}